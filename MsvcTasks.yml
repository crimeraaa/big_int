version: '3'

# NOTE: `Fo` doesn't accept nor require ':' but `Fe` and `Fd` do.
vars:
  COMPILER: clang-cl
  STANDARD: >-
    {{if eq .LANG "c"}}
    {{"-std:c11"}}
    {{else if eq .LANG "cpp"}}
    {{"-std:c++17"}}
    {{else}}
    {{fail "LANG must be one of `c cpp`"}}
    {{end}}
  COMMON_FLAGS: >-
    -nologo
    -W4
    -WX
    -Wno-error=gnu-alignof-expression
    {{.STANDARD}}
    -EHsc
    -permissive-
    -Fe:"{{.OUT_EXE}}"
    -Fo"{{.OBJ}}/"
  DEBUG_FLAGS: >-
    -Od
    -Zi
    -Fd:"{{.BIN}}/"
    -fsanitize=address
    -DDEBUG_USE_ASSERT
  RELEASE_FLAGS: -O1
  
tasks:
  default:
    silent: true
    cmds:
      - task: build

  build:
    desc: Builds the C or C++ executable.
    deps:
      - task: :dirs
    vars:
      # Hack as long as `sources` is not supported in a variable and Windows CMD
      # cannot glob
      _SOURCES:
        sh: ls -1 '{{.SRC}}' | grep '{{.EXT_SOURCE}}$' | awk '{print "{{.SRC}}/" $0}'
      SOURCES: '{{._SOURCES | replace "\n" " "}}'
      COMPILER_FLAGS: >-
        {{.COMMON_FLAGS}}
        {{if eq .MODE "debug"}}
        {{.DEBUG_FLAGS}}
        {{else if eq .MODE "release"}}
        {{.RELEASE_FLAGS}}
        {{else}}
        {{fail "MODE must be one of `debug release`"}}
        {{end}}
    cmds:
      - '{{.COMPILER}} {{.COMPILER_FLAGS}} {{.SOURCES}}'
    requires:
      vars: [LANG, MODE, OUT_EXE]
    # Seems '{cpp,hpp}' or `[ch]pp` doesn't work with Windows
    sources:
      - '{{.SRC}}/*.{{.EXT_SOURCE}}'
      - '{{.SRC}}/*.{{.EXT_HEADER}}'
    generates:
      - '{{.OUT_EXE}}'
  
  run:
    desc: '[Re]build the C or C++ executable if needed then run it.'
    deps:
      - task: build
    cmds:
      - '{{.OUT_EXE}}'
  
  # Seems globbing works here even on Windows?
  clean:
    cmds:
      - rm -f {{.BIN}}/*.{exe,exp,lib,pdb} {{.OBJ}}/*.obj
